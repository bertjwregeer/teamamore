#include  <iostream>
#include "AmoreRobotDrive.h"
#include "WPILib.h"

/**
 * This is a demo program showing the use of the RobotBase class.
 * The SimpleRobot class is the base of a robot application that will automatically call your
 * Autonomous and OperatorControl methods at the right time as controlled by the switches on
 * the driver station or the field controls.
 */
class Robot : public SimpleRobot
{
	AmoreRobotDrive *myRobot; // robot drive system
	Joystick * rightStick; // only joystick
	Joystick * leftStick;
	DriverStation *ds; // driver station

public:
	Robot(void) {
		//Accelerometer(225);		// Initialize the accelerometer with interrupt handler 225
		
		ds = DriverStation::GetInstance();
		std::cerr << "We have a driver station" << std::endl;
		myRobot = new AmoreRobotDrive(); // custom robot drive base
		std::cerr << "We have AmoreRobotDrive" << std::endl;
		leftStick = new Joystick(1); // create the joysticks
		rightStick = new Joystick(2);
		
		std::cerr << "We have a joystick" << std::endl;
		GetWatchdog().SetExpiration(100);
		
		std::cout << "Hello, I am the robot, and I am starting!" << std::endl;
	}

	/**
	 * Dummy autonomous mode for testing:
	 * 		drive left & right motors for 2 seconds then stop
	 */
	void Autonomous(void) {
		GetWatchdog().SetEnabled(false);
		//myRobot->AutoDrive();
		//Wait(2000); 				//    for 2 seconds
		
		
	}

	/**
	 * Runs the motors with arcade steering. 
	 */
	void OperatorControl(void) {
		GetWatchdog().SetEnabled(true);
		
		while (IsOperatorControl()) {
			GetWatchdog().Feed();
			//ds.GetStickAxis(stick, axis);
			
			//myRobot->CrabDrive();
			//myRobot->ArcadeDrive(stick); // drive with arcade style (use right stick)
			myRobot->MyDrive(rightStick, leftStick);
			
			/*
			if (joystick->GetButton) {
				
			}
			*/
			Wait(0.005);
		}
	}
};

START_ROBOT_CLASS(Robot);
